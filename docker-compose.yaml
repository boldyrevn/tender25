services:
  # traefik:
  #   image: traefik:v2.10
  #   command:
  #     - "--api.insecure=true"
  #     - "--providers.docker=true"
  #     - "--entrypoints.web.address=:80"
  #     - "--entrypoints.websecure.address=:443"
  #     - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
  #     - "--certificatesresolvers.myresolver.acme.email=boldyrevn@mail.ru"
  #     - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
  #   ports:
  #     - "80:80"
  #     - "443:443"
  #   volumes:
  #     - "/var/run/docker.sock:/var/run/docker.sock:ro"
  #     - "./letsencrypt:/letsencrypt"
  #   restart: always
  metabase:
    image: metabase/metabase:latest
    volumes:
      - /dev/urandom:/dev/random:ro
    ports:
      - 3000:3000
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabaseappdb
      MB_DB_PORT: 5432
      MB_DB_USER: tender
      MB_DB_PASS: tenderpass
      MB_DB_HOST: postgres
    networks:
      - metanet1
    healthcheck:
      test: curl --fail -I http://localhost:3000/api/health || exit 1
      interval: 15s
      timeout: 5s
      retries: 5
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: tender
      POSTGRES_DB: metabaseappdb
      POSTGRES_PASSWORD: tenderpass
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - metanet1
    ports:
      - 5432:5432
  fastapi:
    build: ./backend
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.fastapi.rule=Host(`185.170.153.129`)"
    #   - "traefik.http.routers.fastapi.entrypoints=websecure"
    #   - "traefik.http.routers.fastapi.tls.certresolver=myresolver"
    networks:
      - metanet1
    ports: 
      - 8000:8000
  frontend:
    build: ./frontend
    # labels:
    #   - "traefik.enable=true"
    #   - "traefik.http.routers.frontend.rule=Host(`185.170.153.129`)"
    #   - "traefik.http.routers.frontend.entrypoints=websecure"
    #   - "traefik.http.routers.frontend.tls.certresolver=myresolver"
    #   - "traefik.http.services.frontend.loadbalancer.server.port=3000"
    networks:
      - metanet1
    ports:
      - 3001:3000
    depends_on:
      - fastapi
  redis:
    image: redis
    networks:
      - metanet1
    ports:
      - 6379:6379


volumes:
  pgdata:
networks:
  metanet1:
    driver: bridge